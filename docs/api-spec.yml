openapi: 3.0.0
info:
  title: User Management API
  description: API untuk manajemen pengguna dengan autentikasi email dan kata sandi
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
tags:
  - name: user
  - name: store
  - name: product

paths:
  /auth/google:
    get:
      summary: Redirect ke halaman otentikasi Google
      tags:
        - "user"
      description: Mengarahkan pengguna ke halaman otentikasi Google menggunakan Laravel Socialite.
      responses:
        '302':
          description: Found
  /auth/google/callback:
    get:
      summary: Handle respons dari Google setelah otentikasi
      tags:
        - "user"
      description: Menangani respons dari Google setelah pengguna selesai melakukan otentikasi.
      responses:
        '302':
          description: Found
  /auth/user:
    get:
      summary: Mendapatkan informasi pengguna yang sudah terotentikasi
      tags:
        - "user"
      description: Mengembalikan informasi pengguna yang sudah terotentikasi dengan Google.
      security:
        - google_oauth2: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    get:
      summary: Mendapatkan daftar pengguna
      tags:
        - "user"
      description: Mengembalikan daftar pengguna yang terdaftar.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Membuat pengguna baru
      tags:
        - "user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      summary: Mendapatkan informasi pengguna
      tags:
        - "user"
      parameters:
        - in: path
          name: userId
          required: true
          description: ID pengguna
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Memperbarui informasi pengguna
      tags:
        - "user"
      parameters:
        - in: path
          name: userId
          required: true
          description: ID pengguna
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Menghapus pengguna
      tags:
        - "user"
      parameters:
        - in: path
          name: userId
          required: true
          description: ID pengguna
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
  /auth/register:
    post:
      summary: Registrasi pengguna baru
      tags:
        - "user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/login:
    post:
      summary: Login pengguna
      tags:
        - "user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/logout:
    post:
      summary: Logout pengguna
      tags:
        - "user"
      description: Logout pengguna yang sudah terotentikasi.
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
  /profile:
    get:
      summary: Mendapatkan informasi profil pengguna
      tags:
        - "user"
      description: Mendapatkan informasi profil pengguna yang sedang login.
      security:
        - google_oauth2: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
    put:
      summary: Memperbarui informasi profil pengguna
      tags:
        - "user"
      description: Memperbarui informasi profil pengguna yang sedang login.
      security:
        - google_oauth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /stores:
    get:
      summary: Mendapatkan daftar toko
      tags:
        - "store"
      description: Mengembalikan daftar semua toko yang terdaftar.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
    post:
      summary: Membuat toko baru
      tags:
        - "store"
      description: Membuat toko baru dengan informasi dasar dan alamat.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
  /stores/{storeId}:
    get:
      summary: Mendapatkan detail toko
      tags:
        - "store"
      description: Mengembalikan detail lengkap dari satu toko berdasarkan ID.
      parameters:
        - in: path
          name: storeId
          required: true
          description: ID dari toko yang ingin dilihat detailnya
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
  /stores/search:
    get:
      summary: Mencari toko berdasarkan nama
      tags:
        - "store"
      description: Mencari toko berdasarkan nama yang cocok.
      parameters:
        - in: query
          name: name
          required: true
          description: Nama toko yang ingin dicari
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
  /products:
    get:
      summary: Mendapatkan daftar produk
      tags:
        - "product"
      description: Mengembalikan daftar produk yang tersedia.
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter produk berdasarkan kategori
        - in: query
          name: minPrice
          schema:
            type: number
          description: Filter produk dengan harga lebih besar dari atau sama dengan nilai ini
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Filter produk dengan harga kurang dari atau sama dengan nilai ini
        - in: query
          name: search
          schema:
            type: string
          description: Cari produk berdasarkan nama produk
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Menambahkan produk baru
      tags:
        - "product"
      description: Menambahkan produk baru ke dalam daftar produk.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{productId}:
    get:
      summary: Mendapatkan informasi produk
      tags:
        - "product"
      description: Mendapatkan informasi lengkap tentang produk berdasarkan ID produk.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: ID produk
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
    put:
      summary: Mengedit informasi produk
      tags:
        - "product"
      description: Mengedit informasi produk berdasarkan ID produk.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: ID produk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
    delete:
      summary: Menghapus produk
      tags:
        - "product"
      description: Menghapus produk berdasarkan ID produk.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: ID produk
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
components:
  securitySchemes:
    google_oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://oauth2.googleapis.com/token'
          scopes:
            openid: View your email address
            profile: View your basic profile info
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
      required:
        - name
        - email
    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    Error:
      type: object
      properties:
        message:
          type: string
    UserProfile:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    UserProfileUpdateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    Store:
      type: object
      properties:
        id:
          type: integer
        nama:
          type: string
        logo:
          type: string
        kategori:
          type: string
        email:
          type: string
        nomor_hp:
          type: string
        alamat:
          $ref: '#/components/schemas/Alamat'
    Alamat:
      type: object
      properties:
        alamat:
          type: string
        detail_lainnya:
          type: string
        provinsi:
          type: string
        kota:
          type: string
        kecamatan:
          type: string
        kode_pos:
          type: string
    StoreCreateRequest:
      type: object
      properties:
        nama:
          type: string
        logo:
          type: string
        kategori:
          type: string
        email:
          type: string
        nomor_hp:
          type: string
        alamat:
          $ref: '#/components/schemas/Alamat'
      required:
        - nama
        - email
        - nomor_hp
        - alamat
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string
          format: uri
        category:
          type: string
        description:
          type: string
        stock:
          type: integer
        sellByDate:
          type: string
          format: date
        consumeByDate:
          type: string
          format: date
        price:
          type: number
    ProductRequest:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
          format: uri
        category:
          type: string
        description:
          type: string
        stock:
          type: integer
        sellByDate:
          type: string
          format: date
        consumeByDate:
          type: string
          format: date
        price:
          type: number
      required:
        - name
        - category
        - stock
        - price